// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: input/v1/input.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/naivary/kubeplate/api/input/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InputerName is the fully-qualified name of the Inputer service.
	InputerName = "input.v1.Inputer"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InputerReadProcedure is the fully-qualified name of the Inputer's Read RPC.
	InputerReadProcedure = "/input.v1.Inputer/Read"
)

// InputerClient is a client for the input.v1.Inputer service.
type InputerClient interface {
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
}

// NewInputerClient constructs a client for the input.v1.Inputer service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInputerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InputerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	inputerMethods := v1.File_input_v1_input_proto.Services().ByName("Inputer").Methods()
	return &inputerClient{
		read: connect.NewClient[v1.ReadRequest, v1.ReadResponse](
			httpClient,
			baseURL+InputerReadProcedure,
			connect.WithSchema(inputerMethods.ByName("Read")),
			connect.WithClientOptions(opts...),
		),
	}
}

// inputerClient implements InputerClient.
type inputerClient struct {
	read *connect.Client[v1.ReadRequest, v1.ReadResponse]
}

// Read calls input.v1.Inputer.Read.
func (c *inputerClient) Read(ctx context.Context, req *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// InputerHandler is an implementation of the input.v1.Inputer service.
type InputerHandler interface {
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
}

// NewInputerHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInputerHandler(svc InputerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inputerMethods := v1.File_input_v1_input_proto.Services().ByName("Inputer").Methods()
	inputerReadHandler := connect.NewUnaryHandler(
		InputerReadProcedure,
		svc.Read,
		connect.WithSchema(inputerMethods.ByName("Read")),
		connect.WithHandlerOptions(opts...),
	)
	return "/input.v1.Inputer/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InputerReadProcedure:
			inputerReadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInputerHandler returns CodeUnimplemented from all methods.
type UnimplementedInputerHandler struct{}

func (UnimplementedInputerHandler) Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("input.v1.Inputer.Read is not implemented"))
}
