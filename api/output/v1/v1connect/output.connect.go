// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: output/v1/output.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/naivary/kubeplate/api/output/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OutputerName is the fully-qualified name of the Outputer service.
	OutputerName = "output.v1.Outputer"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OutputerWriteProcedure is the fully-qualified name of the Outputer's Write RPC.
	OutputerWriteProcedure = "/output.v1.Outputer/Write"
)

// OutputerClient is a client for the output.v1.Outputer service.
type OutputerClient interface {
	Write(context.Context, *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error)
}

// NewOutputerClient constructs a client for the output.v1.Outputer service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOutputerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OutputerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	outputerMethods := v1.File_output_v1_output_proto.Services().ByName("Outputer").Methods()
	return &outputerClient{
		write: connect.NewClient[v1.WriteRequest, v1.WriteResponse](
			httpClient,
			baseURL+OutputerWriteProcedure,
			connect.WithSchema(outputerMethods.ByName("Write")),
			connect.WithClientOptions(opts...),
		),
	}
}

// outputerClient implements OutputerClient.
type outputerClient struct {
	write *connect.Client[v1.WriteRequest, v1.WriteResponse]
}

// Write calls output.v1.Outputer.Write.
func (c *outputerClient) Write(ctx context.Context, req *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error) {
	return c.write.CallUnary(ctx, req)
}

// OutputerHandler is an implementation of the output.v1.Outputer service.
type OutputerHandler interface {
	Write(context.Context, *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error)
}

// NewOutputerHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOutputerHandler(svc OutputerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	outputerMethods := v1.File_output_v1_output_proto.Services().ByName("Outputer").Methods()
	outputerWriteHandler := connect.NewUnaryHandler(
		OutputerWriteProcedure,
		svc.Write,
		connect.WithSchema(outputerMethods.ByName("Write")),
		connect.WithHandlerOptions(opts...),
	)
	return "/output.v1.Outputer/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OutputerWriteProcedure:
			outputerWriteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOutputerHandler returns CodeUnimplemented from all methods.
type UnimplementedOutputerHandler struct{}

func (UnimplementedOutputerHandler) Write(context.Context, *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("output.v1.Outputer.Write is not implemented"))
}
